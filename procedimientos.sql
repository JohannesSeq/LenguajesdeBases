/*
Seccion de pruebas
SELECT * FROM ESTADOS;
SELECT * FROM DISTRITO;
SELECT * FROM CANTON;
SELECT * FROM PROVINCIA;
SELECT * FROM ROL_PERSONA;
SELECT * FROM PERSONAS;
SELECT * FROM DIRECCIONES_PERSONAS;
SELECT * FROM ENCRIPCION_PASSWORDS;
SELECT * FROM CORREOS;
SELECT * FROM PUESTOS;
SELECT * FROM DEPARTAMENTOS;
SELECT * FROM EMPLEADOS;
SELECT * FROM PLATILLOS;
SELECT * FROM MENU;
SELECT * FROM PLATILLOS_MENU;
SELECT * FROM PEDIDOS;
SELECT * FROM METODO_PAGO;
SELECT * FROM LISTA_PLATILLOS;
SELECT * FROM FACTURAS;

SELECT AUTENTICACION('nidiaces@gmail.com','Password1234') AS RESULTADO_AUTH FROM DUAL;
SELECT CALCULAR_TOTAL_PEDIDO(2) FROM DUAL;

--EXEC ACTUALIZAR_TOTAL_PEDIDO(2);
EXEC BORRADO_LOGICO('ST_584551_PERSONAS','Probando_borrado_logico');
*/

---------------------- Correr en session de Playa Cacao---------------------
-- Procedimientos almacenados

------------------- Funcion para crear estados -------------------------------------------------

CREATE OR REPLACE FUNCTION CREAR_ENTRADA_ESTADO(
    P_ID_ENTRADA VARCHAR, P_TABLA VARCHAR, P_COMENTARIO VARCHAR
    ) RETURN VARCHAR
AS

    V_ESTADO_ID VARCHAR(250); --Variable para almacenar el ID Del estado

BEGIN

    --Creacion del valor para el ID de la entrada
    V_ESTADO_ID := 'ST_' || TO_CHAR(P_ID_ENTRADA) || '_' || P_TABLA;
    
    --Creacion del estado que lleva el control de la entrada
    INSERT INTO ESTADOS(ID_ESTADO, TABLA_ENTRADA, COMENTARIO, FECHA_CAMBIO, ESTADO) 
    VALUES (V_ESTADO_ID, P_TABLA, P_COMENTARIO, CURRENT_DATE, 'Activo');
    COMMIT;
    RETURN V_ESTADO_ID;
END;
/

------------------- Funcion para autenticar usuarios -------------------------------------------
CREATE OR REPLACE FUNCTION AUTENTICACION(
    P_EMAIL VARCHAR,
    P_PASSWORD VARCHAR
) RETURN VARCHAR
AS
    --- Variables para la contraseña
    V_LLAVE RAW(32); --Variable para almacenar la llave de encriptacion
    V_PASSWORD_RAW RAW(2000); --Variable para almaacenar la contraseña encriptada
    V_PASSWORD_ID VARCHAR(100); -- Variable para almacenar el ID del password
    V_PASSWORD_DESENCRIPTADO RAW(1000); --Variable para almacenar la contraseña desencriptada
    V_PASSWORD_DESENCRIPTADO_VARCHAR VARCHAR(100);

    V_RESULTADO VARCHAR(100); --Variable para almacenar el valor final de la operacion
    
BEGIN
    V_RESULTADO := 'FALSE'; --Variable para almacenar el valor final de la operacion

    --Obtenemos el valor del id de la contraseña
    SELECT 
        PASSWORD_ID,
        LLAVE_PASSWORD, 
        PASSWORD_VAL
    INTO V_PASSWORD_ID, V_LLAVE, V_PASSWORD_RAW
    FROM VISTA_AUTENTICACION
    WHERE DIRECCION_DE_CORREO = P_EMAIL;

        -- Desencriptar los datos
    V_PASSWORD_DESENCRIPTADO := DBMS_CRYPTO.DECRYPT(
                        src => V_PASSWORD_RAW,
                        typ => DBMS_CRYPTO.ENCRYPT_AES256 + DBMS_CRYPTO.CHAIN_CBC + DBMS_CRYPTO.PAD_PKCS5,
                        key => V_LLAVE);

    --Convertimos el password de RAW a Varchar
    V_PASSWORD_DESENCRIPTADO_VARCHAR := UTL_RAW.CAST_TO_VARCHAR2(V_PASSWORD_DESENCRIPTADO); 


    IF V_PASSWORD_DESENCRIPTADO_VARCHAR = P_PASSWORD THEN
        V_RESULTADO := 'TRUE';
    END IF;

    RETURN V_RESULTADO;
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        V_RESULTADO := 'FALSE';
        RETURN V_RESULTADO;
END;
/

------------ Procedimiento almacenado para enviar la info del usuario autenticado---------------

CREATE OR REPLACE PROCEDURE ENVIO_AUTENTICACION (
    P_CORREO VARCHAR,
    P_PASSWORD VARCHAR,
    P_CURSOR_RESULTADO OUT SYS_REFCURSOR
)
AS
    V_RESULTADO_AUTH VARCHAR(20) := 'False';
BEGIN
    V_RESULTADO_AUTH := AUTENTICACION(P_CORREO,P_PASSWORD);

    IF V_RESULTADO_AUTH = 'TRUE' THEN
        OPEN P_CURSOR_RESULTADO FOR
        SELECT NOMBRE, DIRECCION_DE_CORREO, ROL
        FROM VISTA_AUTENTICACION
        WHERE DIRECCION_DE_CORREO = P_CORREO;

    ELSE

        OPEN P_CURSOR_RESULTADO FOR
        SELECT NOMBRE, DIRECCION_DE_CORREO, ROL
        FROM VISTA_AUTENTICACION
        WHERE DIRECCION_DE_CORREO = 'Invalid';
    END IF;
END;

------------------------------ CREAR RESERVACION ---------------------------------
CREATE OR REPLACE PROCEDURE CREAR_RESERVACION(
    P_CEDULA_CLIENTE NUMBER,
    P_ID_MESA NUMBER,
    P_ID_HORARIO NUMBER,
    P_CONFIRMACION VARCHAR,
    P_COMENTARIO VARCHAR
)
AS
    V_ID_RESERVA NUMBER;
    V_ESTADO_ID VARCHAR(250);
BEGIN
    INSERT INTO RESERVACIONES(CONFIRMACION, CEDULA_CLIENTE, MESA, ID_HORARIO)
    VALUES (P_CONFIRMACION, P_CEDULA_CLIENTE, P_ID_MESA, P_ID_HORARIO);

    SELECT ID_RESERVA INTO V_ID_RESERVA
    FROM RESERVACIONES
    WHERE CEDULA_CLIENTE = P_CEDULA_CLIENTE
    ORDER BY ID_RESERVA DESC FETCH FIRST 1 ROW ONLY;

    V_ESTADO_ID := CREAR_ENTRADA_ESTADO(TO_CHAR(V_ID_RESERVA), 'RESERVACIONES', P_COMENTARIO);

    UPDATE RESERVACIONES
    SET ID_ESTADO = V_ESTADO_ID
    WHERE ID_RESERVA = V_ID_RESERVA;

    COMMIT;
END;
/

------------------------------ BORRADO LOGICO -----------------------------------------
CREATE OR REPLACE PROCEDURE BORRADO_LOGICO(
    P_ID_ESTADO VARCHAR,
    P_COMENTARIO VARCHAR
)
AS
    V_ESTADO_ID VARCHAR(250);
    V_SQL VARCHAR(1000);
BEGIN

    UPDATE ESTADOS
    SET ESTADO = 'Inactivo', FECHA_CAMBIO = CURRENT_DATE
    WHERE ID_ESTADO = P_ID_ESTADO;

    COMMIT;
END;
/

------------------------------ LEER PLATILLOS ------------------------------------


CREATE OR REPLACE PROCEDURE ENVIO_TOTAL_PLATILLOS (
    P_CURSOR_RESULTADO OUT SYS_REFCURSOR
)
AS
BEGIN
        OPEN P_CURSOR_RESULTADO FOR
            SELECT ID_PLATILLO, NOMBRE_PLATILLO, PRECIO_UNITARIO, CANTIDAD
            FROM VISTA_PLATILLOS;
END;

------------------------------ ACTUALIZAR PLATILLO ------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PLATILLO(
    P_ID_PLATILLO NUMBER,
    P_NUEVO_NOMBRE VARCHAR,
    P_NUEVO_PRECIO NUMBER,
    P_NUEVA_CANTIDAD NUMBER
)
AS
BEGIN
    UPDATE PLATILLOS
    SET NOMBRE_PLATILLO = P_NUEVO_NOMBRE,
        PRECIO_UNITARIO = P_NUEVO_PRECIO,
        CANTIDAD = P_NUEVA_CANTIDAD
    WHERE ID_PLATILLO = P_ID_PLATILLO;
    COMMIT;
END;
/

------------------------------ ACTUALIZAR MENU -----------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_MENU(
    P_ID_MENU NUMBER,
    P_NUEVO_NOMBRE_MENU VARCHAR,
    P_NUEVA_DESCRIPCION VARCHAR
)
AS
BEGIN
    UPDATE MENU
    SET NOMBRE_MENU = P_NUEVO_NOMBRE_MENU,
        DESCRIPCION = P_NUEVA_DESCRIPCION
    WHERE ID_MENU = P_ID_MENU;
    COMMIT;
END;
/

------------------------------ ACTUALIZAR PEDIDO ---------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_PEDIDO(
    P_ID_PEDIDO NUMBER,
    P_NUEVO_MONTO_ESTIMADO NUMBER
)
AS
BEGIN
    UPDATE PEDIDOS
    SET MONTO_ESTIMADO = P_NUEVO_MONTO_ESTIMADO
    WHERE ID_PEDIDO = P_ID_PEDIDO;
    COMMIT;
END;
/

------------------------------ ACTUALIZAR FACTURA --------------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_FACTURA(
    P_ID_FACTURA NUMBER,
    P_NUEVO_MONTO_TOTAL NUMBER,
    P_NUEVO_VUELTO NUMBER
)
AS
BEGIN
    UPDATE FACTURAS
    SET MONTO_TOTAL = P_NUEVO_MONTO_TOTAL,
        VUELTO = P_NUEVO_VUELTO
    WHERE ID_FACTURA = P_ID_FACTURA;
    COMMIT;
END;
/

------------------------------ ACTUALIZAR RESERVACION ----------------------------------
CREATE OR REPLACE PROCEDURE ACTUALIZAR_RESERVACION(
    P_ID_RESERVA NUMBER,
    P_NUEVA_CONFIRMACION VARCHAR
)
AS
BEGIN
    UPDATE RESERVACIONES
    SET CONFIRMACION = P_NUEVA_CONFIRMACION
    WHERE ID_RESERVA = P_ID_RESERVA;
    COMMIT;
END;
/

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Elimina un cliente por su c�dula
CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE(P_CEDULA NUMBER) AS
BEGIN
    DELETE FROM CLIENTES WHERE CEDULA = P_CEDULA;
    COMMIT;
END;
 
-- Actualiza el salario de un empleado
CREATE OR REPLACE PROCEDURE ACTUALIZAR_SALARIO_EMPLEADO(P_ID_EMPLEADO NUMBER, P_NUEVO_SALARIO NUMBER) AS
BEGIN
    UPDATE EMPLEADOS SET SALARIO = P_NUEVO_SALARIO WHERE ID_EMPLEADO = P_ID_EMPLEADO;
    COMMIT;
END;
 
-- Recupera informaci�n de un cliente
CREATE OR REPLACE PROCEDURE OBTENER_CLIENTE(P_CEDULA NUMBER) AS
    CURSOR CUR_CLIENTE IS SELECT * FROM CLIENTES WHERE CEDULA = P_CEDULA;
    REG CLIENTES%ROWTYPE;
BEGIN
    OPEN CUR_CLIENTE;
    FETCH CUR_CLIENTE INTO REG;
    CLOSE CUR_CLIENTE;
END;
 
-- Inserta una nueva direcci�n de correo para un cliente
CREATE OR REPLACE PROCEDURE INSERTAR_CORREO_CLIENTE(
    P_CORREO VARCHAR, P_CORREO_RESPALDO VARCHAR, P_CEDULA_CLIENTE NUMBER
) AS
BEGIN
    INSERT INTO CORREO_CLIENTES (DIRECCION_DE_CORREO, CORREO_DE_RESPALDO, CEDULA_CLIENTE)
    VALUES (P_CORREO, P_CORREO_RESPALDO, P_CEDULA_CLIENTE);
    COMMIT;
END;
 
-- Inserta una nueva direcci�n de correo para un empleado
CREATE OR REPLACE PROCEDURE INSERTAR_CORREO_EMPLEADO(
    P_CORREO VARCHAR, P_CORREO_RESPALDO VARCHAR, P_ID_EMPLEADO NUMBER
) AS
BEGIN
    INSERT INTO CORREO_EMPLEADOS (DIRECCION_DE_CORREO, CORREO_DE_RESPALDO, ID_EMPLEADO_CORREO)
    VALUES (P_CORREO, P_CORREO_RESPALDO, P_ID_EMPLEADO);
    COMMIT;
END;
 
-- Obtiene todos los clientes
CREATE OR REPLACE PROCEDURE OBTENER_TODOS_CLIENTES AS
    CURSOR CUR_CLIENTES IS SELECT * FROM CLIENTES;
BEGIN
    FOR REG IN CUR_CLIENTES LOOP
        DBMS_OUTPUT.PUT_LINE(REG.NOMBRE || ' ' || REG.APELLIDO);
    END LOOP;
END;

-- Obtiene todos los empleados
CREATE OR REPLACE PROCEDURE OBTENER_TODOS_EMPLEADOS AS
    CURSOR CUR_EMPLEADOS IS SELECT * FROM EMPLEADOS;
BEGIN
    FOR REG IN CUR_EMPLEADOS LOOP
        DBMS_OUTPUT.PUT_LINE(REG.NOMBRE || ' ' || REG.APELLIDO);
    END LOOP;
END;
 
-- Actualiza el correo de un usuario
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CORREO_USUARIO(
    P_ID_USUARIO NUMBER, P_NUEVO_CORREO VARCHAR
) AS
BEGIN
    UPDATE USUARIOS SET CORREO = P_NUEVO_CORREO WHERE ID_USUARIO = P_ID_USUARIO;
    COMMIT;
END;
 
-- Elimina un correo de cliente
CREATE OR REPLACE PROCEDURE ELIMINAR_CORREO_CLIENTE(P_CORREO VARCHAR) AS
BEGIN
    DELETE FROM CORREO_CLIENTES WHERE DIRECCION_DE_CORREO = P_CORREO;
    COMMIT;
END;
 
-- Elimina un correo de empleado
CREATE OR REPLACE PROCEDURE ELIMINAR_CORREO_EMPLEADO(P_CORREO VARCHAR) AS
BEGIN
    DELETE FROM CORREO_EMPLEADOS WHERE DIRECCION_DE_CORREO = P_CORREO;
    COMMIT;
END;

