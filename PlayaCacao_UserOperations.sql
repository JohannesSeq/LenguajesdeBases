---------------------- Correr en session de Playa Cacao---------------------

--Creacion de la tabla de Clientes
CREATE TABLE CLIENTES(
    CEDULA NUMBER CONSTRAINT CEDULA_PK PRIMARY KEY,
    NOMBRE VARCHAR(50),
    APELLIDO VARCHAR(50),
    NUMERO_DE_TELEFONO VARCHAR(20)
)

ALTER TABLE CLIENTES MOVE TABLESPACE PLAYA_CACAO_TBS;

--Creacion de la tabla de empleados
CREATE TABLE EMPLEADOS(
    ID_EMPLEADO NUMBER CONSTRAINT ID_EMPLEADO_PK PRIMARY KEY,
    ID_DEPARTAMENTO NUMBER,
    ID_PUESTO NUMBER,
    NOMBRE VARCHAR(50),
    APELLIDO VARCHAR(50),
    SALARIO NUMBER,
    CEDULA NUMBER
)

ALTER TABLE EMPLEADOS MOVE TABLESPACE PLAYA_CACAO_TBS;

--Creacion de la tabla correo_clientes
CREATE TABLE CORREO_CLIENTES(
    DIRECCION_DE_CORREO VARCHAR(100) PRIMARY KEY,
    CORREO_DE_RESPALDO VARCHAR(100),
    CEDULA_CLIENTE NUMBER
)

ALTER TABLE CORREO_CLIENTES MOVE TABLESPACE PLAYA_CACAO_TBS;

ALTER TABLE CORREO_CLIENTES
ADD CONSTRAINT CEDULA_CLIENTE_CORREO_FK
    FOREIGN KEY(CEDULA_CLIENTE)
    REFERENCES CLIENTES(CEDULA);

--Creacion de la tabla correo_empleados
CREATE TABLE CORREO_EMPLEADOS(
    DIRECCION_DE_CORREO VARCHAR(100) PRIMARY KEY,
    CORREO_DE_RESPALDO VARCHAR(100),
    ID_EMPLEADO_CORREO NUMBER
)

ALTER TABLE CORREO_EMPLEADOS MOVE TABLESPACE PLAYA_CACAO_TBS;

ALTER TABLE CORREO_EMPLEADOS
ADD CONSTRAINT ID_EMPLEADO_CORREO_FK
    FOREIGN KEY(ID_EMPLEADO_CORREO)
    REFERENCES EMPLEADOS(ID_EMPLEADO);

--Creacion de la tabla Usuarios
CREATE TABLE USUARIOS(
    ID_USUARIO NUMBER CONSTRAINT ID_USUARIO_PK PRIMARY KEY,
    CORREO VARCHAR(100),
    PASSWORD VARCHAR(100),
    ROL_ID NUMBER
)

ALTER TABLE USUARIOS MOVE TABLESPACE PLAYA_CACAO_TBS;

--CREACION DE LA TABLA PUESTOS
CREATE TABLE PUESTOS(
    ID_PUESTO NUMBER CONSTRAINT ID_PUESTO_PK PRIMARY KEY,
    NOMBRE_PUESTO VARCHAR(50),
    SALARIO_BASE NUMBER,
    DESCRIPCION VARCHAR(255)
);

--CREACION DE LA TABLA PUESTOS
CREATE TABLE DEPARTAMENTOS(
    ID_DEPARTAMENTO NUMBER CONSTRAINT ID_DEPARTAMENTO_PK PRIMARY KEY,
    NOMBRE_DEPARTAMENTO VARCHAR(50),
    DESCRIPCION VARCHAR(255)
);


--Creacion de la tabla de Pedidos
CREATE TABLE PEDIDOS(
    ID_PEDIDO NUMBER CONSTRAINT ID_PEDIDO_PK PRIMARY KEY,
    CEDULA_CLIENTE NUMBER,
    ID_PLATILLO NUMBER,
    ID_COMPRA NUMBER,
    TOTAL NUMBER,
    CANTIDAD_PRODUCTOS NUMBER
);

ALTER TABLE PEDIDOS
ADD CONSTRAINT CEDULA_CLIENTE_PEDIDOS_FK
    FOREIGN KEY(CEDULA_CLIENTE)
    REFERENCES CLIENTES(CEDULA);

ALTER TABLE PEDIDOS MOVE TABLESPACE PLAYA_CACAO_TBS;

--DROP TABLE PEDIDOS;

--Creacion de la tabla Compras
CREATE TABLE COMPRAS (
    ID_COMPRA NUMBER CONSTRAINT ID_FACTURA_PK PRIMARY KEY,
    PAGO_TOTAL NUMBER,
    CEDULA_CLIENTE NUMBER
);

ALTER TABLE PEDIDOS MOVE TABLESPACE PLAYA_CACAO_TBS;

ALTER TABLE COMPRAS
ADD CONSTRAINT CEDULA_CLIENTE_COMPRAS_FK
    FOREIGN KEY(CEDULA_CLIENTE)
    REFERENCES CLIENTES(CEDULA)

--Creacion de la tabla de Facturas
CREATE TABLE Facturas (
    ID_FACTURA NUMBER CONSTRAINT ID_FACTURAS_PK PRIMARY KEY,
    ID_COMPRA NUMBER,
    CEDULA_CLIENTE NUMBER,
    METODO_DE_PAGO VARCHAR(250)
);

ALTER TABLE Facturas MOVE TABLESPACE PLAYA_CACAO_TBS;

ALTER TABLE Facturas
ADD CONSTRAINT CEDULA_CLIENTE_Facturas_FK
    FOREIGN KEY(CEDULA_CLIENTE)
    REFERENCES CLIENTES(CEDULA)

ALTER TABLE Facturas
ADD CONSTRAINT ID_COMPRAS_Facturas_FK
    FOREIGN KEY(ID_COMPRA)
    REFERENCES COMPRAS(ID_COMPRA)

--Creacion de la tabla de RESERVAS
CREATE TABLE Reservas (
    ID_RESERVA NUMBER CONSTRAINT ID_MESA_PK PRIMARY KEY,
    DISPONIBILIDAD CHAR(1) DEFAULT 'S', -- Usamos 'S' para disponible y 'N' para no disponible
    ID_CLIENTE NUMBER,
    MESA NUMBER,
    HORA TIMESTAMP
);

ALTER TABLE Reservas MOVE TABLESPACE PLAYA_CACAO_TBS;

ALTER TABLE Reservas
ADD CONSTRAINT CEDULA_CLIENTE_Reservas_FK
    FOREIGN KEY(ID_CLIENTE)
    REFERENCES CLIENTES(CEDULA)

--Creacion de la tabla de MENU
CREATE TABLE Menu (
    ID_MENU NUMBER CONSTRAINT ID_MENU_PK PRIMARY KEY,
    NOMBRE_MENU VARCHAR2(100),
    DESCRIPCION VARCHAR2(255), 
    DISPONIBLE CHAR(1) DEFAULT 'S' -- Usamos 'S' para disponible y 'N' para no disponible
);

ALTER TABLE PLATILLOS MOVE TABLESPACE PLAYA_CACAO_TBS;

--Creacion de la tabla Platillos
CREATE TABLE PLATILLOS(
    ID_PLATILLO NUMBER CONSTRAINT ID_PLATILLO_PK PRIMARY KEY,
    NOMBRE VARCHAR(250),
    PRECIO_UNITARIO NUMBER,
    CANTIDAD NUMBER,
    ID_MENU NUMBER
);

ALTER TABLE PLATILLOS
ADD CONSTRAINT MENU_ID_PLATILLOS_FK
    FOREIGN KEY(ID_MENU)
    REFERENCES Menu(ID_MENU)

ALTER TABLE PLATILLOS MOVE TABLESPACE PLAYA_CACAO_TBS;



/*ALTER TABLE USUARIOS
ADD CONSTRAINT USUARIO_CLIENTE_CORREO_FK
    FOREIGN KEY(CORREO)
    REFERENCES CORREO_CLIENTES(DIRECCION_DE_CORREO);

ALTER TABLE USUARIOS
ADD CONSTRAINT USUARIO_EMPLEADO_CORREO_FK
    FOREIGN KEY(CORREO)
    REFERENCES CORREO_EMPLEADOS(DIRECCION_DE_CORREO);*/
    
    
SET ROLE ACCESO_PLAYA_CACAO_DB;

--Inserciones de la tabla platillos 
INSERT INTO Menu (ID_MENU, NOMBRE_PLATILLO, DESCRIPCION, PRECIO, CATEGORIA, DISPONIBLE)
VALUES (1, 'Ensalada César', 'Ensalada fresca con pollo a la parrilla o Frito y aderezo César', 8.50, 'Entrada', 'S');
COMMIT;

INSERT INTO Menu (ID_MENU, NOMBRE_PLATILLO, DESCRIPCION, PRECIO, CATEGORIA, DISPONIBLE)
VALUES (2, 'Sopa de Mariscos', 'Sopa cremosa de Mariscos con leche de coco y mariscos frescos', 15.50, 'Plato fuerte', 'S');
COMMIT;

INSERT INTO Menu (ID_MENU, NOMBRE_PLATILLO, DESCRIPCION, PRECIO, CATEGORIA, DISPONIBLE)
VALUES (3, 'Lomito de Res 3 pimientas', 'Lomito de res a la parrilla con papas y verduras al vapor', 20.00, 'Plato fuerte', 'S');
COMMIT;

INSERT INTO Menu (ID_MENU, NOMBRE_PLATILLO, DESCRIPCION, PRECIO, CATEGORIA, DISPONIBLE)
VALUES (4, 'Pescado entero', 'Pescado entero acompañado de arroz y ensalada', 12.50, 'Plato fuerte', 'N');
COMMIT;

--Inserciones para la tabla Reserva
INSERT INTO Reserva (ID_MESA, DISPONIBILIDAD, HORA)
VALUES (1, 'S', TO_TIMESTAMP('2025-03-17 12:00:00', 'YYYY-MM-DD HH24:MI:SS'));
COMMIT;

INSERT INTO Reserva (ID_MESA, DISPONIBILIDAD, HORA)
VALUES (2, 'N', TO_TIMESTAMP('2025-03-17 13:00:00', 'YYYY-MM-DD HH24:MI:SS'));
COMMIT;

INSERT INTO Reserva (ID_MESA, DISPONIBILIDAD, HORA)
VALUES (3, 'S', TO_TIMESTAMP('2025-03-17 14:30:00', 'YYYY-MM-DD HH24:MI:SS'));
COMMIT;

INSERT INTO Reserva (ID_MESA, DISPONIBILIDAD, HORA)
VALUES (4, 'S', TO_TIMESTAMP('2025-03-17 15:45:00', 'YYYY-MM-DD HH24:MI:SS'));
COMMIT;

--Inserciones en la tabla Factura 

INSERT INTO Factura (ID_FACTURA, NOMBRE_PLATILLO, PRECIO, VUELTO)
VALUES (1, 'Ensalada César', 8.50, 2.50);


INSERT INTO Factura (ID_FACTURA, NOMBRE_PLATILLO, PRECIO, VUELTO)
VALUES (2, 'Sopa de Mariscos', 15.50, 1.00);


INSERT INTO Factura (ID_FACTURA, NOMBRE_PLATILLO, PRECIO, VUELTO)
VALUES (3, 'Lomito de Res 3 pimientas', 20.00, 0.50);


INSERT INTO Factura (ID_FACTURA, NOMBRE_PLATILLO, PRECIO, VUELTO)
VALUES (4, 'Pescado entero', 12.50, 1.00);


--Insercion de datos en la tabla de Clientes
INSERT INTO CLIENTES(CEDULA,NOMBRE,APELLIDO,NUMERO_DE_TELEFONO)
VALUES (1,'Johannes','Sequeira','1234-5678');
COMMIT;

--Insercion de datos en la tabla correo clientes
INSERT INTO CORREO_CLIENTES(DIRECCION_DE_CORREO,CORREO_DE_RESPALDO,CEDULA_CLIENTE)
VALUES ('Johannes@gmail.com','Sequeira@gmail.com',1);
COMMIT;

--Insercion de datos en la tabla de empleados
INSERT INTO EMPLEADOS(ID_EMPLEADO,ID_DEPARTAMENTO,ID_PUESTO,NOMBRE,APELLIDO,SALARIO,CEDULA)
VALUES (1,1,1,'Steven','Guerra',1000000,5678);
COMMIT;

--Insercion de datos en la tabla correo empleados
INSERT INTO CORREO_EMPLEADOS(DIRECCION_DE_CORREO,CORREO_DE_RESPALDO,ID_EMPLEADO_CORREO)
VALUES ('steven@playacacao.com','steven@gmail.com',1);
COMMIT;

--Insercion de datos en la tabla de Usuarios
INSERT INTO USUARIOS(ID_USUARIO,CORREO,PASSWORD,ROL_ID)
VALUES (1,'Johannes@gmail.com','ABC123',1);
COMMIT;

--Insercion de datos en la tabla de Usuarios
INSERT INTO USUARIOS(ID_USUARIO,CORREO,PASSWORD,ROL_ID)
VALUES (2,'Steven@playacacao.com','ABC123',2);
COMMIT;

-- Procedimientos almacenados
-- Inserta un nuevo cliente
CREATE OR REPLACE PROCEDURE INSERTAR_CLIENTE(
    P_CEDULA NUMBER, P_NOMBRE VARCHAR, P_APELLIDO VARCHAR, P_NUMERO_TELEFONO VARCHAR
) AS
BEGIN
    INSERT INTO CLIENTES (CEDULA, NOMBRE, APELLIDO, NUMERO_DE_TELEFONO)
    VALUES (P_CEDULA, P_NOMBRE, P_APELLIDO, P_NUMERO_TELEFONO);
    COMMIT;
END;
 
-- Inserta un nuevo empleado
CREATE OR REPLACE PROCEDURE INSERTAR_EMPLEADO(
    P_ID_EMPLEADO NUMBER, P_ID_DEPARTAMENTO NUMBER, P_ID_PUESTO NUMBER,
    P_NOMBRE VARCHAR, P_APELLIDO VARCHAR, P_SALARIO NUMBER, P_CEDULA NUMBER
) AS
BEGIN
    INSERT INTO EMPLEADOS (ID_EMPLEADO, ID_DEPARTAMENTO, ID_PUESTO, NOMBRE, APELLIDO, SALARIO, CEDULA)
    VALUES (P_ID_EMPLEADO, P_ID_DEPARTAMENTO, P_ID_PUESTO, P_NOMBRE, P_APELLIDO, P_SALARIO, P_CEDULA);
    COMMIT;
END;
 
-- Elimina un cliente por su c�dula
CREATE OR REPLACE PROCEDURE ELIMINAR_CLIENTE(P_CEDULA NUMBER) AS
BEGIN
    DELETE FROM CLIENTES WHERE CEDULA = P_CEDULA;
    COMMIT;
END;
 
-- Actualiza el salario de un empleado
CREATE OR REPLACE PROCEDURE ACTUALIZAR_SALARIO_EMPLEADO(P_ID_EMPLEADO NUMBER, P_NUEVO_SALARIO NUMBER) AS
BEGIN
    UPDATE EMPLEADOS SET SALARIO = P_NUEVO_SALARIO WHERE ID_EMPLEADO = P_ID_EMPLEADO;
    COMMIT;
END;
 
-- Recupera informaci�n de un cliente
CREATE OR REPLACE PROCEDURE OBTENER_CLIENTE(P_CEDULA NUMBER) AS
    CURSOR CUR_CLIENTE IS SELECT * FROM CLIENTES WHERE CEDULA = P_CEDULA;
    REG CLIENTES%ROWTYPE;
BEGIN
    OPEN CUR_CLIENTE;
    FETCH CUR_CLIENTE INTO REG;
    CLOSE CUR_CLIENTE;
END;
 
-- Inserta un usuario
CREATE OR REPLACE PROCEDURE INSERTAR_USUARIO(P_ID_USUARIO NUMBER, P_CORREO VARCHAR, P_PASSWORD VARCHAR, P_ROL_ID NUMBER) AS
BEGIN
    INSERT INTO USUARIOS (ID_USUARIO, CORREO, PASSWORD, ROL_ID)
    VALUES (P_ID_USUARIO, P_CORREO, P_PASSWORD, P_ROL_ID);
    COMMIT;
END;
 
-- Elimina un usuario
CREATE OR REPLACE PROCEDURE ELIMINAR_USUARIO(P_ID_USUARIO NUMBER) AS
BEGIN
    DELETE FROM USUARIOS WHERE ID_USUARIO = P_ID_USUARIO;
    COMMIT;
END;

-- Inserta una nueva direcci�n de correo para un cliente
CREATE OR REPLACE PROCEDURE INSERTAR_CORREO_CLIENTE(
    P_CORREO VARCHAR, P_CORREO_RESPALDO VARCHAR, P_CEDULA_CLIENTE NUMBER
) AS
BEGIN
    INSERT INTO CORREO_CLIENTES (DIRECCION_DE_CORREO, CORREO_DE_RESPALDO, CEDULA_CLIENTE)
    VALUES (P_CORREO, P_CORREO_RESPALDO, P_CEDULA_CLIENTE);
    COMMIT;
END;
 
-- Inserta una nueva direcci�n de correo para un empleado
CREATE OR REPLACE PROCEDURE INSERTAR_CORREO_EMPLEADO(
    P_CORREO VARCHAR, P_CORREO_RESPALDO VARCHAR, P_ID_EMPLEADO NUMBER
) AS
BEGIN
    INSERT INTO CORREO_EMPLEADOS (DIRECCION_DE_CORREO, CORREO_DE_RESPALDO, ID_EMPLEADO_CORREO)
    VALUES (P_CORREO, P_CORREO_RESPALDO, P_ID_EMPLEADO);
    COMMIT;
END;
 
-- Obtiene todos los clientes
CREATE OR REPLACE PROCEDURE OBTENER_TODOS_CLIENTES AS
    CURSOR CUR_CLIENTES IS SELECT * FROM CLIENTES;
BEGIN
    FOR REG IN CUR_CLIENTES LOOP
        DBMS_OUTPUT.PUT_LINE(REG.NOMBRE || ' ' || REG.APELLIDO);
    END LOOP;
END;

-- Obtiene todos los empleados
CREATE OR REPLACE PROCEDURE OBTENER_TODOS_EMPLEADOS AS
    CURSOR CUR_EMPLEADOS IS SELECT * FROM EMPLEADOS;
BEGIN
    FOR REG IN CUR_EMPLEADOS LOOP
        DBMS_OUTPUT.PUT_LINE(REG.NOMBRE || ' ' || REG.APELLIDO);
    END LOOP;
END;
 
-- Actualiza el correo de un usuario
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CORREO_USUARIO(
    P_ID_USUARIO NUMBER, P_NUEVO_CORREO VARCHAR
) AS
BEGIN
    UPDATE USUARIOS SET CORREO = P_NUEVO_CORREO WHERE ID_USUARIO = P_ID_USUARIO;
    COMMIT;
END;
 
-- Elimina un correo de cliente
CREATE OR REPLACE PROCEDURE ELIMINAR_CORREO_CLIENTE(P_CORREO VARCHAR) AS
BEGIN
    DELETE FROM CORREO_CLIENTES WHERE DIRECCION_DE_CORREO = P_CORREO;
    COMMIT;
END;
 
-- Elimina un correo de empleado
CREATE OR REPLACE PROCEDURE ELIMINAR_CORREO_EMPLEADO(P_CORREO VARCHAR) AS
BEGIN
    DELETE FROM CORREO_EMPLEADOS WHERE DIRECCION_DE_CORREO = P_CORREO;
    COMMIT;
END;


-- Triggers
-- Evita la eliminaci�n de empleados con salario mayor a 5000
CREATE OR REPLACE TRIGGER TRG_PREVENIR_ELIMINACION_EMPLEADO
BEFORE DELETE ON EMPLEADOS
FOR EACH ROW
WHEN (OLD.SALARIO > 5000)
BEGIN
    RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar empleados con salario mayor a 5000.');
END;
 
-- Registra en la tabla de auditor�a cuando se inserta un nuevo cliente
CREATE OR REPLACE TRIGGER TRG_AUDITORIA_INSERT_CLIENTE
AFTER INSERT ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA (TABLA, OPERACION, USUARIO, FECHA)
    VALUES ('CLIENTES', 'INSERT', USER, SYSDATE);
END;
 
-- Registra los cambios en los salarios de los empleados en la tabla de auditor�a
CREATE OR REPLACE TRIGGER TRG_AUDITORIA_UPDATE_SALARIO
AFTER UPDATE OF SALARIO ON EMPLEADOS
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA (TABLA, OPERACION, USUARIO, FECHA, DETALLE)
    VALUES ('EMPLEADOS', 'UPDATE', USER, SYSDATE, 'Salario cambiado de ' || OLD.SALARIO || ' a ' || NEW.SALARIO);
END;
 
-- Previene que se inserten o actualicen empleados con salario negativo
CREATE OR REPLACE TRIGGER TRG_PREVENIR_SALARIO_NEGATIVO
BEFORE INSERT OR UPDATE ON EMPLEADOS
FOR EACH ROW
BEGIN
    IF :NEW.SALARIO < 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'El salario no puede ser negativo.');
    END IF;
END;
 
-- Registra en la tabla de auditor�a cuando se actualiza el n�mero de tel�fono de un cliente
CREATE OR REPLACE TRIGGER TRG_ACTUALIZAR_NUM_TELEFONO
BEFORE UPDATE OF NUMERO_DE_TELEFONO ON CLIENTES
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA (TABLA, OPERACION, USUARIO, FECHA, DETALLE)
    VALUES ('CLIENTES', 'UPDATE', USER, SYSDATE, 'N�mero cambiado de ' || OLD.NUMERO_DE_TELEFONO || ' a ' || NEW.NUMERO_DE_TELEFONO);
END;
 
-- Evita la eliminaci�n de usuarios del sistema
CREATE OR REPLACE TRIGGER TRG_BLOQUEAR_ELIMINACION_USUARIO
BEFORE DELETE ON USUARIOS
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20003, 'No se permite eliminar usuarios del sistema.');
END;

-- Creaci�n de vistas
CREATE OR REPLACE VIEW VISTA_EMPLEADOS AS
SELECT ID_EMPLEADO, NOMBRE, APELLIDO, SALARIO FROM EMPLEADOS;
 
CREATE OR REPLACE VIEW VISTA_CLIENTES AS
SELECT CEDULA, NOMBRE, APELLIDO, NUMERO_DE_TELEFONO FROM CLIENTES;
 
CREATE OR REPLACE VIEW VISTA_USUARIOS AS
SELECT ID_USUARIO, CORREO, ROL_ID FROM USUARIOS;
 
CREATE OR REPLACE VIEW VISTA_CORREOS_CLIENTES AS
SELECT DIRECCION_DE_CORREO, CEDULA_CLIENTE FROM CORREO_CLIENTES;
 
CREATE OR REPLACE VIEW VISTA_CORREOS_EMPLEADOS AS
SELECT DIRECCION_DE_CORREO, ID_EMPLEADO_CORREO FROM CORREO_EMPLEADOS;
 
CREATE OR REPLACE VIEW VISTA_EMPLEADOS_COMPLETA AS
SELECT E.ID_EMPLEADO, E.NOMBRE, E.APELLIDO, E.SALARIO, C.DIRECCION_DE_CORREO
FROM EMPLEADOS E
LEFT JOIN CORREO_EMPLEADOS C ON E.ID_EMPLEADO = C.ID_EMPLEADO_CORREO;
 
CREATE OR REPLACE VIEW VISTA_CLIENTES_COMPLETA AS
SELECT C.CEDULA, C.NOMBRE, C.APELLIDO, C.NUMERO_DE_TELEFONO, CO.DIRECCION_DE_CORREO
FROM CLIENTES C
LEFT JOIN CORREO_CLIENTES CO ON C.CEDULA = CO.CEDULA_CLIENTE;
 
CREATE OR REPLACE VIEW VISTA_SALARIOS AS
SELECT ID_EMPLEADO, NOMBRE, APELLIDO, SALARIO FROM EMPLEADOS WHERE SALARIO > 3000;
 
CREATE OR REPLACE VIEW VISTA_ROLES_USUARIOS AS
SELECT U.ID_USUARIO, U.CORREO, U.ROL_ID FROM USUARIOS U WHERE U.ROL_ID IS NOT NULL;
 
CREATE OR REPLACE VIEW VISTA_TELEFONOS_CLIENTES AS
SELECT NOMBRE, APELLIDO, NUMERO_DE_TELEFONO FROM CLIENTES WHERE NUMERO_DE_TELEFONO IS NOT NULL;




