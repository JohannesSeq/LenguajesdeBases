CREATE OR REPLACE PACKAGE PKT_RESERVACIONES AS
    PROCEDURE CREAR_RESERVACION(
        P_CONFIRMACION VARCHAR,
        P_CEDULA_CLIENTE NUMBER,
        P_ID_MESA NUMBER
    );

    PROCEDURE ACTUALIZAR_RESERVACION(
        P_ID_RESERVA NUMBER,
        P_NUEVA_CONFIRMACION VARCHAR,
        P_ID_MESA NUMBER
    );

    PROCEDURE ENVIO_TOTAL_RESERVACIONES(P_CURSOR OUT SYS_REFCURSOR);
    PROCEDURE ENVIO_RESERVACION_INDIVIDUAL(P_ID_RESERVA NUMBER, P_CURSOR OUT SYS_REFCURSOR);
END PKT_RESERVACIONES;
/


CREATE OR REPLACE PACKAGE BODY PKT_RESERVACIONES AS

    PROCEDURE CREAR_RESERVACION(
        P_CONFIRMACION VARCHAR,
        P_CEDULA_CLIENTE NUMBER,
        P_ID_MESA NUMBER
    ) AS
        V_ID_RESERVA NUMBER;
        V_ID_HORARIO NUMBER;
        V_ESTADO_ID VARCHAR(250);
    BEGIN
        -- Obtener horario de la mesa seleccionada
        SELECT ID_HORARIO INTO V_ID_HORARIO FROM MESAS WHERE ID_MESA = P_ID_MESA;

        INSERT INTO RESERVACIONES(CONFIRMACION, CEDULA_CLIENTE, MESA, ID_HORARIO)
        VALUES (P_CONFIRMACION, P_CEDULA_CLIENTE, P_ID_MESA, V_ID_HORARIO);

        -- Obtener la última reservación del cliente
        SELECT ID_RESERVA INTO V_ID_RESERVA
        FROM RESERVACIONES
        WHERE CEDULA_CLIENTE = P_CEDULA_CLIENTE
        ORDER BY ID_RESERVA DESC
        FETCH FIRST 1 ROW ONLY;

        V_ESTADO_ID := CREAR_ENTRADA_ESTADO(TO_CHAR(V_ID_RESERVA), 'RESERVACIONES', 'Creación de reservación');

        UPDATE RESERVACIONES
        SET ID_ESTADO = V_ESTADO_ID
        WHERE ID_RESERVA = V_ID_RESERVA;

        COMMIT;
    END;

    PROCEDURE ACTUALIZAR_RESERVACION(
        P_ID_RESERVA NUMBER,
        P_NUEVA_CONFIRMACION VARCHAR,
        P_ID_MESA NUMBER
    ) AS
        V_ID_HORARIO NUMBER;
    BEGIN
        -- Obtener el nuevo horario de la mesa
        SELECT ID_HORARIO INTO V_ID_HORARIO FROM MESAS WHERE ID_MESA = P_ID_MESA;

        UPDATE RESERVACIONES
        SET CONFIRMACION = P_NUEVA_CONFIRMACION,
            MESA = P_ID_MESA,
            ID_HORARIO = V_ID_HORARIO
        WHERE ID_RESERVA = P_ID_RESERVA;

        COMMIT;
    END;

    PROCEDURE ENVIO_TOTAL_RESERVACIONES(P_CURSOR OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_CURSOR FOR
        SELECT * FROM VISTA_RESERVACIONES;
    END;

    PROCEDURE ENVIO_RESERVACION_INDIVIDUAL(P_ID_RESERVA NUMBER, P_CURSOR OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN P_CURSOR FOR
        SELECT * FROM VISTA_RESERVACIONES WHERE ID_RESERVA = P_ID_RESERVA;
    END;

END PKT_RESERVACIONES;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_RESERVACION (
    P_ID_RESERVA IN NUMBER,
    P_RESULTADO OUT VARCHAR
)
AS
    V_ID_ESTADO VARCHAR(250);
BEGIN
    -- Obtener el estado asociado a la reservación
    SELECT ID_ESTADO INTO V_ID_ESTADO
    FROM RESERVACIONES
    WHERE ID_RESERVA = P_ID_RESERVA;

    -- Eliminar la reservación
    DELETE FROM RESERVACIONES WHERE ID_RESERVA = P_ID_RESERVA;

    -- Eliminar su estado
    DELETE FROM ESTADOS WHERE ID_ESTADO = V_ID_ESTADO;

    COMMIT;

    P_RESULTADO := 'BORRADO_FISICO';
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        P_RESULTADO := 'NO_EXISTE_RESERVA';
END;
/
